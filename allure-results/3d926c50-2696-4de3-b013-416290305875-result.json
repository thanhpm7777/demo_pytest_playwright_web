{"name": "test_register_valid", "status": "broken", "statusDetails": {"message": "sqlalchemy.exc.OperationalError: (pymysql.err.OperationalError) (2003, \"Can't connect to MySQL server on '2024@116.118.84.136' ([Errno 11003] getaddrinfo failed)\")\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "trace": "self = <pymysql.connections.Connection object at 0x000001E4C12013A0>, sock = None\n\n    def connect(self, sock=None):\n        self._closed = False\n        try:\n            if sock is None:\n                if self.unix_socket:\n                    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n                    sock.settimeout(self.connect_timeout)\n                    sock.connect(self.unix_socket)\n                    self.host_info = \"Localhost via UNIX socket\"\n                    self._secure = True\n                    if DEBUG:\n                        print(\"connected using unix_socket\")\n                else:\n                    kwargs = {}\n                    if self.bind_address is not None:\n                        kwargs[\"source_address\"] = (self.bind_address, 0)\n                    while True:\n                        try:\n>                           sock = socket.create_connection(\n                                (self.host, self.port), self.connect_timeout, **kwargs\n                            )\n\n.venv\\Lib\\site-packages\\pymysql\\connections.py:661: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\socket.py:829: in create_connection\n    for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhost = '2024@116.118.84.136', port = 3306, family = 0, type = <SocketKind.SOCK_STREAM: 1>, proto = 0, flags = 0\n\n    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):\n        \"\"\"Resolve host and port into list of address info entries.\n    \n        Translate the host/port argument into a sequence of 5-tuples that contain\n        all the necessary arguments for creating a socket connected to that service.\n        host is a domain name, a string representation of an IPv4/v6 address or\n        None. port is a string service name such as 'http', a numeric port number or\n        None. By passing None as the value of host and port, you can pass NULL to\n        the underlying C API.\n    \n        The family, type and proto arguments can be optionally specified in order to\n        narrow the list of addresses returned. Passing zero as a value for each of\n        these arguments selects the full range of results.\n        \"\"\"\n        # We override this function since we want to translate the numeric family\n        # and socket type values to enum constants.\n        addrlist = []\n>       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nE       socket.gaierror: [Errno 11003] getaddrinfo failed\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\socket.py:964: gaierror\n\nDuring handling of the above exception, another exception occurred:\n\nself = <sqlalchemy.engine.base.Connection object at 0x000001E4C0158530>, engine = Engine(mysql+pymysql://root:***@2024@116.118.84.136:3306/students), connection = None, _has_events = None, _allow_revalidate = True\n_allow_autobegin = True\n\n    def __init__(\n        self,\n        engine: Engine,\n        connection: Optional[PoolProxiedConnection] = None,\n        _has_events: Optional[bool] = None,\n        _allow_revalidate: bool = True,\n        _allow_autobegin: bool = True,\n    ):\n        \"\"\"Construct a new Connection.\"\"\"\n        self.engine = engine\n        self.dialect = dialect = engine.dialect\n    \n        if connection is None:\n            try:\n>               self._dbapi_connection = engine.raw_connection()\n\n.venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:143: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:3301: in raw_connection\n    return self.pool.connect()\n.venv\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:447: in connect\n    return _ConnectionFairy._checkout(self)\n.venv\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:1264: in _checkout\n    fairy = _ConnectionRecord.checkout(pool)\n.venv\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:711: in checkout\n    rec = pool._do_get()\n.venv\\Lib\\site-packages\\sqlalchemy\\pool\\impl.py:177: in _do_get\n    with util.safe_reraise():\n.venv\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:224: in __exit__\n    raise exc_value.with_traceback(exc_tb)\n.venv\\Lib\\site-packages\\sqlalchemy\\pool\\impl.py:175: in _do_get\n    return self._create_connection()\n.venv\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:388: in _create_connection\n    return _ConnectionRecord(self)\n.venv\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:673: in __init__\n    self.__connect()\n.venv\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:899: in __connect\n    with util.safe_reraise():\n.venv\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:224: in __exit__\n    raise exc_value.with_traceback(exc_tb)\n.venv\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:895: in __connect\n    self.dbapi_connection = connection = pool._invoke_creator(self)\n.venv\\Lib\\site-packages\\sqlalchemy\\engine\\create.py:661: in connect\n    return dialect.connect(*cargs, **cparams)\n.venv\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:629: in connect\n    return self.loaded_dbapi.connect(*cargs, **cparams)  # type: ignore[no-any-return]  # NOQA: E501\n.venv\\Lib\\site-packages\\pymysql\\connections.py:365: in __init__\n    self.connect()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pymysql.connections.Connection object at 0x000001E4C12013A0>, sock = None\n\n    def connect(self, sock=None):\n        self._closed = False\n        try:\n            if sock is None:\n                if self.unix_socket:\n                    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n                    sock.settimeout(self.connect_timeout)\n                    sock.connect(self.unix_socket)\n                    self.host_info = \"Localhost via UNIX socket\"\n                    self._secure = True\n                    if DEBUG:\n                        print(\"connected using unix_socket\")\n                else:\n                    kwargs = {}\n                    if self.bind_address is not None:\n                        kwargs[\"source_address\"] = (self.bind_address, 0)\n                    while True:\n                        try:\n                            sock = socket.create_connection(\n                                (self.host, self.port), self.connect_timeout, **kwargs\n                            )\n                            break\n                        except OSError as e:\n                            if e.errno == errno.EINTR:\n                                continue\n                            raise\n                    self.host_info = \"socket %s:%d\" % (self.host, self.port)\n                    if DEBUG:\n                        print(\"connected using socket\")\n                    sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                    sock.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)\n                sock.settimeout(None)\n    \n            self._sock = sock\n            self._rfile = sock.makefile(\"rb\")\n            self._next_seq_id = 0\n    \n            self._get_server_information()\n            self._request_authentication()\n    \n            # Send \"SET NAMES\" query on init for:\n            # - Ensure charaset (and collation) is set to the server.\n            #   - collation_id in handshake packet may be ignored.\n            # - If collation is not specified, we don't know what is server's\n            #   default collation for the charset. For example, default collation\n            #   of utf8mb4 is:\n            #   - MySQL 5.7, MariaDB 10.x: utf8mb4_general_ci\n            #   - MySQL 8.0: utf8mb4_0900_ai_ci\n            #\n            # Reference:\n            # - https://github.com/PyMySQL/PyMySQL/issues/1092\n            # - https://github.com/wagtail/wagtail/issues/9477\n            # - https://zenn.dev/methane/articles/2023-mysql-collation (Japanese)\n            self.set_character_set(self.charset, self.collation)\n    \n            if self.sql_mode is not None:\n                c = self.cursor()\n                c.execute(\"SET sql_mode=%s\", (self.sql_mode,))\n                c.close()\n    \n            if self.init_command is not None:\n                c = self.cursor()\n                c.execute(self.init_command)\n                c.close()\n    \n            if self.autocommit_mode is not None:\n                self.autocommit(self.autocommit_mode)\n        except BaseException as e:\n            self._force_close()\n    \n            if isinstance(e, (OSError, IOError)):\n                exc = err.OperationalError(\n                    CR.CR_CONN_HOST_ERROR,\n                    f\"Can't connect to MySQL server on {self.host!r} ({e})\",\n                )\n                # Keep original exception and traceback to investigate error.\n                exc.original_exception = e\n                exc.traceback = traceback.format_exc()\n                if DEBUG:\n                    print(exc.traceback)\n>               raise exc\nE               pymysql.err.OperationalError: (2003, \"Can't connect to MySQL server on '2024@116.118.84.136' ([Errno 11003] getaddrinfo failed)\")\n\n.venv\\Lib\\site-packages\\pymysql\\connections.py:723: OperationalError\n\nThe above exception was the direct cause of the following exception:\n\npage = <Page url='https://hocvancokimngan.com/register_user/'>\n\n    @pytest.mark.ui\n    @pytest.mark.auth\n    @pytest.mark.regression\n    @allure.feature(\"Auth\")\n    @allure.story(\"Register\")\n    def test_register_valid(page):\n        auth = AuthPage(page).goto_register()\n        username =\"ThanhQA\"\n        email = \"newuser@example.com\"\n        auth.register(username=\"ThanhQA\", email=email, password=\"123456\", confirm_pass=\"123456\")\n        with allure.step(\"Verify user vừa đăng ký đã tồn tại trong MySQL\"):\n>           rows = poll_query(\n                \"SELECT username, email FROM users WHERE email = :email\",\n                {\"email\": email},\n                retries=6,  # tuỳ backend\n                delay_sec=1.0,  # 1s giữa các lần thử\n            )\n\ntests\\auth\\test_register.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nconfigs\\db.py:41: in poll_query\n    rows = run_query(query, params)\nconfigs\\db.py:23: in run_query\n    with engine.connect() as conn:\n.venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:3277: in connect\n    return self._connection_cls(self)\n.venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:145: in __init__\n    Connection._handle_dbapi_exception_noconnection(\n.venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2440: in _handle_dbapi_exception_noconnection\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n.venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:143: in __init__\n    self._dbapi_connection = engine.raw_connection()\n.venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:3301: in raw_connection\n    return self.pool.connect()\n.venv\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:447: in connect\n    return _ConnectionFairy._checkout(self)\n.venv\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:1264: in _checkout\n    fairy = _ConnectionRecord.checkout(pool)\n.venv\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:711: in checkout\n    rec = pool._do_get()\n.venv\\Lib\\site-packages\\sqlalchemy\\pool\\impl.py:177: in _do_get\n    with util.safe_reraise():\n.venv\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:224: in __exit__\n    raise exc_value.with_traceback(exc_tb)\n.venv\\Lib\\site-packages\\sqlalchemy\\pool\\impl.py:175: in _do_get\n    return self._create_connection()\n.venv\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:388: in _create_connection\n    return _ConnectionRecord(self)\n.venv\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:673: in __init__\n    self.__connect()\n.venv\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:899: in __connect\n    with util.safe_reraise():\n.venv\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:224: in __exit__\n    raise exc_value.with_traceback(exc_tb)\n.venv\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:895: in __connect\n    self.dbapi_connection = connection = pool._invoke_creator(self)\n.venv\\Lib\\site-packages\\sqlalchemy\\engine\\create.py:661: in connect\n    return dialect.connect(*cargs, **cparams)\n.venv\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:629: in connect\n    return self.loaded_dbapi.connect(*cargs, **cparams)  # type: ignore[no-any-return]  # NOQA: E501\n.venv\\Lib\\site-packages\\pymysql\\connections.py:365: in __init__\n    self.connect()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pymysql.connections.Connection object at 0x000001E4C12013A0>, sock = None\n\n    def connect(self, sock=None):\n        self._closed = False\n        try:\n            if sock is None:\n                if self.unix_socket:\n                    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n                    sock.settimeout(self.connect_timeout)\n                    sock.connect(self.unix_socket)\n                    self.host_info = \"Localhost via UNIX socket\"\n                    self._secure = True\n                    if DEBUG:\n                        print(\"connected using unix_socket\")\n                else:\n                    kwargs = {}\n                    if self.bind_address is not None:\n                        kwargs[\"source_address\"] = (self.bind_address, 0)\n                    while True:\n                        try:\n                            sock = socket.create_connection(\n                                (self.host, self.port), self.connect_timeout, **kwargs\n                            )\n                            break\n                        except OSError as e:\n                            if e.errno == errno.EINTR:\n                                continue\n                            raise\n                    self.host_info = \"socket %s:%d\" % (self.host, self.port)\n                    if DEBUG:\n                        print(\"connected using socket\")\n                    sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                    sock.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)\n                sock.settimeout(None)\n    \n            self._sock = sock\n            self._rfile = sock.makefile(\"rb\")\n            self._next_seq_id = 0\n    \n            self._get_server_information()\n            self._request_authentication()\n    \n            # Send \"SET NAMES\" query on init for:\n            # - Ensure charaset (and collation) is set to the server.\n            #   - collation_id in handshake packet may be ignored.\n            # - If collation is not specified, we don't know what is server's\n            #   default collation for the charset. For example, default collation\n            #   of utf8mb4 is:\n            #   - MySQL 5.7, MariaDB 10.x: utf8mb4_general_ci\n            #   - MySQL 8.0: utf8mb4_0900_ai_ci\n            #\n            # Reference:\n            # - https://github.com/PyMySQL/PyMySQL/issues/1092\n            # - https://github.com/wagtail/wagtail/issues/9477\n            # - https://zenn.dev/methane/articles/2023-mysql-collation (Japanese)\n            self.set_character_set(self.charset, self.collation)\n    \n            if self.sql_mode is not None:\n                c = self.cursor()\n                c.execute(\"SET sql_mode=%s\", (self.sql_mode,))\n                c.close()\n    \n            if self.init_command is not None:\n                c = self.cursor()\n                c.execute(self.init_command)\n                c.close()\n    \n            if self.autocommit_mode is not None:\n                self.autocommit(self.autocommit_mode)\n        except BaseException as e:\n            self._force_close()\n    \n            if isinstance(e, (OSError, IOError)):\n                exc = err.OperationalError(\n                    CR.CR_CONN_HOST_ERROR,\n                    f\"Can't connect to MySQL server on {self.host!r} ({e})\",\n                )\n                # Keep original exception and traceback to investigate error.\n                exc.original_exception = e\n                exc.traceback = traceback.format_exc()\n                if DEBUG:\n                    print(exc.traceback)\n>               raise exc\nE               sqlalchemy.exc.OperationalError: (pymysql.err.OperationalError) (2003, \"Can't connect to MySQL server on '2024@116.118.84.136' ([Errno 11003] getaddrinfo failed)\")\nE               (Background on this error at: https://sqlalche.me/e/20/e3q8)\n\n.venv\\Lib\\site-packages\\pymysql\\connections.py:723: OperationalError"}, "steps": [{"name": "Goto Register", "status": "passed", "start": 1756178674693, "stop": 1756178676287}, {"name": "Register user", "status": "passed", "parameters": [{"name": "username", "value": "'ThanhQA'"}, {"name": "email", "value": "'newuser@example.com'"}, {"name": "password", "value": "'123456'"}, {"name": "confirm_pass", "value": "'123456'"}], "start": 1756178676288, "stop": 1756178676803}, {"name": "Verify user vừa đăng ký đã tồn tại trong MySQL", "status": "broken", "statusDetails": {"message": "sqlalchemy.exc.OperationalError: (pymysql.err.OperationalError) (2003, \"Can't connect to MySQL server on '2024@116.118.84.136' ([Errno 11003] getaddrinfo failed)\")\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\n", "trace": "  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\tests\\auth\\test_register.py\", line 18, in test_register_valid\n    rows = poll_query(\n           ^^^^^^^^^^^\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\configs\\db.py\", line 41, in poll_query\n    rows = run_query(query, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\configs\\db.py\", line 23, in run_query\n    with engine.connect() as conn:\n         ^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 3277, in connect\n    return self._connection_cls(self)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 145, in __init__\n    Connection._handle_dbapi_exception_noconnection(\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2440, in _handle_dbapi_exception_noconnection\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 143, in __init__\n    self._dbapi_connection = engine.raw_connection()\n                             ^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 3301, in raw_connection\n    return self.pool.connect()\n           ^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\sqlalchemy\\pool\\base.py\", line 447, in connect\n    return _ConnectionFairy._checkout(self)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\sqlalchemy\\pool\\base.py\", line 1264, in _checkout\n    fairy = _ConnectionRecord.checkout(pool)\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\sqlalchemy\\pool\\base.py\", line 711, in checkout\n    rec = pool._do_get()\n          ^^^^^^^^^^^^^^\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\sqlalchemy\\pool\\impl.py\", line 177, in _do_get\n    with util.safe_reraise():\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py\", line 224, in __exit__\n    raise exc_value.with_traceback(exc_tb)\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\sqlalchemy\\pool\\impl.py\", line 175, in _do_get\n    return self._create_connection()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\sqlalchemy\\pool\\base.py\", line 388, in _create_connection\n    return _ConnectionRecord(self)\n           ^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\sqlalchemy\\pool\\base.py\", line 673, in __init__\n    self.__connect()\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\sqlalchemy\\pool\\base.py\", line 899, in __connect\n    with util.safe_reraise():\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py\", line 224, in __exit__\n    raise exc_value.with_traceback(exc_tb)\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\sqlalchemy\\pool\\base.py\", line 895, in __connect\n    self.dbapi_connection = connection = pool._invoke_creator(self)\n                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\sqlalchemy\\engine\\create.py\", line 661, in connect\n    return dialect.connect(*cargs, **cparams)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 629, in connect\n    return self.loaded_dbapi.connect(*cargs, **cparams)  # type: ignore[no-any-return]  # NOQA: E501\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\pymysql\\connections.py\", line 365, in __init__\n    self.connect()\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\pymysql\\connections.py\", line 723, in connect\n    raise exc\n"}, "start": 1756178676803, "stop": 1756178676857}], "start": 1756178674692, "stop": 1756178676860, "uuid": "c9ca154e-60f9-4bb6-9bf4-943cd22a07da", "historyId": "6f55718ea0bec09ba40ede5f445c18f1", "testCaseId": "6f55718ea0bec09ba40ede5f445c18f1", "fullName": "tests.auth.test_register#test_register_valid", "labels": [{"name": "story", "value": "Register"}, {"name": "feature", "value": "Auth"}, {"name": "tag", "value": "regression"}, {"name": "tag", "value": "auth"}, {"name": "tag", "value": "ui"}, {"name": "parentSuite", "value": "tests.auth"}, {"name": "suite", "value": "test_register"}, {"name": "host", "value": "Thanh-PC"}, {"name": "thread", "value": "27768-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.auth.test_register"}]}