{"name": "test_create_post_valid", "status": "broken", "statusDetails": {"message": "sqlalchemy.exc.StatementError: (sqlalchemy.exc.InvalidRequestError) A value is required for bind parameter 'title'\n[SQL: SELECT email FROM blog_blog WHERE title = %(title)s]\n[parameters: [{'email': 'Hello World'}]]\n(Background on this error at: https://sqlalche.me/e/20/cd3x)", "trace": "self = <sqlalchemy.engine.base.Connection object at 0x0000021217977A40>, dialect = <sqlalchemy.dialects.mysql.pymysql.MySQLDialect_pymysql object at 0x0000021217977470>\nconstructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.mysql.mysqldb.MySQLExecutionContext_mysqldb'>>\nstatement = <sqlalchemy.dialects.mysql.mysqldb.MySQLCompiler_mysqldb object at 0x00000212165DC110>, parameters = [{'email': 'Hello World'}], execution_options = immutabledict({})\nargs = (<sqlalchemy.dialects.mysql.mysqldb.MySQLCompiler_mysqldb object at 0x00000212165DC110>, [{'email': 'Hello World'}], <sqlalchemy.sql.elements.TextClause object at 0x00000212159AC440>, [BindParameter('title', None, type_=NullType())])\nkw = {'cache_hit': <CacheStats.CACHE_MISS: 1>}, conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x0000021217ACAC30>\n\n    def _execute_context(\n        self,\n        dialect: Dialect,\n        constructor: Callable[..., ExecutionContext],\n        statement: Union[str, Compiled],\n        parameters: Optional[_AnyMultiExecuteParams],\n        execution_options: _ExecuteOptions,\n        *args: Any,\n        **kw: Any,\n    ) -> CursorResult[Any]:\n        \"\"\"Create an :class:`.ExecutionContext` and execute, returning\n        a :class:`_engine.CursorResult`.\"\"\"\n    \n        if execution_options:\n            yp = execution_options.get(\"yield_per\", None)\n            if yp:\n                execution_options = execution_options.union(\n                    {\"stream_results\": True, \"max_row_buffer\": yp}\n                )\n        try:\n            conn = self._dbapi_connection\n            if conn is None:\n                conn = self._revalidate_connection()\n    \n>           context = constructor(\n                dialect, self, conn, execution_options, *args, **kw\n            )\n\n.venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1815: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:1414: in _init_compiled\n    compiled.construct_params(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sqlalchemy.dialects.mysql.mysqldb.MySQLCompiler_mysqldb object at 0x00000212165DC110>, params = {'email': 'Hello World'}, extracted_parameters = [BindParameter('title', None, type_=NullType())], escape_names = False\n_group_number = 0, _check = True, _no_postcompile = False\n\n    def construct_params(\n        self,\n        params: Optional[_CoreSingleExecuteParams] = None,\n        extracted_parameters: Optional[Sequence[BindParameter[Any]]] = None,\n        escape_names: bool = True,\n        _group_number: Optional[int] = None,\n        _check: bool = True,\n        _no_postcompile: bool = False,\n    ) -> _MutableCoreSingleExecuteParams:\n        \"\"\"return a dictionary of bind parameter keys and values\"\"\"\n    \n        if self._render_postcompile and not _no_postcompile:\n            assert self._post_compile_expanded_state is not None\n            if not params:\n                return dict(self._post_compile_expanded_state.parameters)\n            else:\n                raise exc.InvalidRequestError(\n                    \"can't construct new parameters when render_postcompile \"\n                    \"is used; the statement is hard-linked to the original \"\n                    \"parameters.  Use construct_expanded_state to generate a \"\n                    \"new statement and parameters.\"\n                )\n    \n        has_escaped_names = escape_names and bool(self.escaped_bind_names)\n    \n        if extracted_parameters:\n            # related the bound parameters collected in the original cache key\n            # to those collected in the incoming cache key.  They will not have\n            # matching names but they will line up positionally in the same\n            # way.   The parameters present in self.bind_names may be clones of\n            # these original cache key params in the case of DML but the .key\n            # will be guaranteed to match.\n            if self.cache_key is None:\n                raise exc.CompileError(\n                    \"This compiled object has no original cache key; \"\n                    \"can't pass extracted_parameters to construct_params\"\n                )\n            else:\n                orig_extracted = self.cache_key[1]\n    \n            ckbm_tuple = self._cache_key_bind_match\n            assert ckbm_tuple is not None\n            ckbm, _ = ckbm_tuple\n            resolved_extracted = {\n                bind: extracted\n                for b, extracted in zip(orig_extracted, extracted_parameters)\n                for bind in ckbm[b]\n            }\n        else:\n            resolved_extracted = None\n    \n        if params:\n            pd = {}\n            for bindparam, name in self.bind_names.items():\n                escaped_name = (\n                    self.escaped_bind_names.get(name, name)\n                    if has_escaped_names\n                    else name\n                )\n    \n                if bindparam.key in params:\n                    pd[escaped_name] = params[bindparam.key]\n                elif name in params:\n                    pd[escaped_name] = params[name]\n    \n                elif _check and bindparam.required:\n                    if _group_number:\n                        raise exc.InvalidRequestError(\n                            \"A value is required for bind parameter %r, \"\n                            \"in parameter group %d\"\n                            % (bindparam.key, _group_number),\n                            code=\"cd3x\",\n                        )\n                    else:\n>                       raise exc.InvalidRequestError(\n                            \"A value is required for bind parameter %r\"\n                            % bindparam.key,\n                            code=\"cd3x\",\n                        )\nE                       sqlalchemy.exc.InvalidRequestError: A value is required for bind parameter 'title' (Background on this error at: https://sqlalche.me/e/20/cd3x)\n\n.venv\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py:1911: InvalidRequestError\n\nThe above exception was the direct cause of the following exception:\n\npage = <Page url='https://hocvancokimngan.com/blog/hello-world/'>, test_users = {'editor': {'email': 'test1111@gmail.com', 'password': '123456'}, 'viewer': {'email': 'viewer@example.com', 'password': 'P@ssw0rd'}}\ntest_posts = {'update': {'new_title': 'Updated Title'}, 'valid': {'content': 'xin chào nhé', 'path_file': 'tests/resources/banner.jpg', 'pdf_driver': '1111', 'tag': 'bai viet hay nhat', ...}}\n\n    @pytest.mark.ui\n    @pytest.mark.post\n    @allure.feature(\"Post\")\n    @allure.story(\"Create\")\n    def test_create_post_valid(page, test_users, test_posts):\n    \n        AuthPage(page).goto_login().login(\n            test_users[\"editor\"][\"email\"],\n            test_users[\"editor\"][\"password\"])\n        title=\"Hello World\"\n        post = PostPage(page)\n        post.goto_new_post()\n        post.create_post(\n            title=test_posts[\"valid\"][\"title\"],\n            the_loai=test_posts[\"valid\"][\"the_loai\"],\n            content=test_posts[\"valid\"][\"content\"],\n            pdf_driver=test_posts[\"valid\"][\"pdf_driver\"],\n            path_file=test_posts[\"valid\"][\"path_file\"],\n            tag=test_posts[\"valid\"][\"tag\"],\n            is_active=False,\n            is_active_tap_chi=True\n        )\n        with allure.step(\"Verify post vừa tạo đã tồn tại trong MySQL\"):\n>           rows = run_query(\n                \"SELECT email FROM blog_blog WHERE title = :title\",\n                {\"email\": title})\n\ntests\\post\\test_post_create.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nconfigs\\db.py:23: in run_query\n    res = conn.execute(text(query), params or {})\n.venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1419: in execute\n    return meth(\n.venv\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:526: in _execute_on_connection\n    return connection._execute_clauseelement(\n.venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1641: in _execute_clauseelement\n    ret = self._execute_context(\n.venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1821: in _execute_context\n    self._handle_dbapi_exception(\n.venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2355: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n.venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1815: in _execute_context\n    context = constructor(\n.venv\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:1414: in _init_compiled\n    compiled.construct_params(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sqlalchemy.dialects.mysql.mysqldb.MySQLCompiler_mysqldb object at 0x00000212165DC110>, params = {'email': 'Hello World'}, extracted_parameters = [BindParameter('title', None, type_=NullType())], escape_names = False\n_group_number = 0, _check = True, _no_postcompile = False\n\n    def construct_params(\n        self,\n        params: Optional[_CoreSingleExecuteParams] = None,\n        extracted_parameters: Optional[Sequence[BindParameter[Any]]] = None,\n        escape_names: bool = True,\n        _group_number: Optional[int] = None,\n        _check: bool = True,\n        _no_postcompile: bool = False,\n    ) -> _MutableCoreSingleExecuteParams:\n        \"\"\"return a dictionary of bind parameter keys and values\"\"\"\n    \n        if self._render_postcompile and not _no_postcompile:\n            assert self._post_compile_expanded_state is not None\n            if not params:\n                return dict(self._post_compile_expanded_state.parameters)\n            else:\n                raise exc.InvalidRequestError(\n                    \"can't construct new parameters when render_postcompile \"\n                    \"is used; the statement is hard-linked to the original \"\n                    \"parameters.  Use construct_expanded_state to generate a \"\n                    \"new statement and parameters.\"\n                )\n    \n        has_escaped_names = escape_names and bool(self.escaped_bind_names)\n    \n        if extracted_parameters:\n            # related the bound parameters collected in the original cache key\n            # to those collected in the incoming cache key.  They will not have\n            # matching names but they will line up positionally in the same\n            # way.   The parameters present in self.bind_names may be clones of\n            # these original cache key params in the case of DML but the .key\n            # will be guaranteed to match.\n            if self.cache_key is None:\n                raise exc.CompileError(\n                    \"This compiled object has no original cache key; \"\n                    \"can't pass extracted_parameters to construct_params\"\n                )\n            else:\n                orig_extracted = self.cache_key[1]\n    \n            ckbm_tuple = self._cache_key_bind_match\n            assert ckbm_tuple is not None\n            ckbm, _ = ckbm_tuple\n            resolved_extracted = {\n                bind: extracted\n                for b, extracted in zip(orig_extracted, extracted_parameters)\n                for bind in ckbm[b]\n            }\n        else:\n            resolved_extracted = None\n    \n        if params:\n            pd = {}\n            for bindparam, name in self.bind_names.items():\n                escaped_name = (\n                    self.escaped_bind_names.get(name, name)\n                    if has_escaped_names\n                    else name\n                )\n    \n                if bindparam.key in params:\n                    pd[escaped_name] = params[bindparam.key]\n                elif name in params:\n                    pd[escaped_name] = params[name]\n    \n                elif _check and bindparam.required:\n                    if _group_number:\n                        raise exc.InvalidRequestError(\n                            \"A value is required for bind parameter %r, \"\n                            \"in parameter group %d\"\n                            % (bindparam.key, _group_number),\n                            code=\"cd3x\",\n                        )\n                    else:\n>                       raise exc.InvalidRequestError(\n                            \"A value is required for bind parameter %r\"\n                            % bindparam.key,\n                            code=\"cd3x\",\n                        )\nE                       sqlalchemy.exc.StatementError: (sqlalchemy.exc.InvalidRequestError) A value is required for bind parameter 'title'\nE                       [SQL: SELECT email FROM blog_blog WHERE title = %(title)s]\nE                       [parameters: [{'email': 'Hello World'}]]\nE                       (Background on this error at: https://sqlalche.me/e/20/cd3x)\n\n.venv\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py:1911: StatementError"}, "steps": [{"name": "Goto Login", "status": "passed", "start": 1756277386279, "stop": 1756277387616}, {"name": "Nhập thông tin đăng nhập", "status": "passed", "start": 1756277387616, "stop": 1756277387697}, {"name": "Đăng nhập", "status": "passed", "start": 1756277387697, "stop": 1756277388578}, {"name": "Open New Post form", "status": "passed", "start": 1756277388579, "stop": 1756277389025}, {"name": "Create post: 'Hello World'", "status": "passed", "parameters": [{"name": "title", "value": "'Hello World'"}, {"name": "the_loai", "value": "'Bài giảng 10'"}, {"name": "content", "value": "'xin chào nhé'"}, {"name": "pdf_driver", "value": "'1111'"}, {"name": "path_file", "value": "'tests/resources/banner.jpg'"}, {"name": "tag", "value": "'bai viet hay nhat'"}, {"name": "is_active", "value": "False"}, {"name": "is_active_tap_chi", "value": "True"}], "start": 1756277389025, "stop": 1756277389717}, {"name": "Verify post vừa tạo đã tồn tại trong MySQL", "status": "broken", "statusDetails": {"message": "sqlalchemy.exc.StatementError: (sqlalchemy.exc.InvalidRequestError) A value is required for bind parameter 'title'\n[SQL: SELECT email FROM blog_blog WHERE title = %(title)s]\n[parameters: [{'email': 'Hello World'}]]\n(Background on this error at: https://sqlalche.me/e/20/cd3x)\n", "trace": "  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\tests\\post\\test_post_create.py\", line 31, in test_create_post_valid\n    rows = run_query(\n           ^^^^^^^^^^\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\configs\\db.py\", line 23, in run_query\n    res = conn.execute(text(query), params or {})\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1419, in execute\n    return meth(\n           ^^^^^\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 526, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1641, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1821, in _execute_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2355, in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1815, in _execute_context\n    context = constructor(\n              ^^^^^^^^^^^^\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 1414, in _init_compiled\n    compiled.construct_params(\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py\", line 1911, in construct_params\n    raise exc.InvalidRequestError(\n"}, "start": 1756277389717, "stop": 1756277389832}], "start": 1756277386278, "stop": 1756277389837, "uuid": "f43d0176-ba8b-4a6f-924a-d8b3d885e47c", "historyId": "04653e96679807f5144d98fdf7559ee4", "testCaseId": "04653e96679807f5144d98fdf7559ee4", "fullName": "tests.post.test_post_create#test_create_post_valid", "labels": [{"name": "feature", "value": "Post"}, {"name": "story", "value": "Create"}, {"name": "tag", "value": "post"}, {"name": "tag", "value": "ui"}, {"name": "parentSuite", "value": "tests.post"}, {"name": "suite", "value": "test_post_create"}, {"name": "host", "value": "Thanh-PC"}, {"name": "thread", "value": "28576-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.post.test_post_create"}]}