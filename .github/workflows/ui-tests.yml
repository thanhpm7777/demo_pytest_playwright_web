name: ui-tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: "0 2 * * 5"   # 09:00 thứ 6 (UTC+7)

permissions:
  contents: read

concurrency:
  group: ci-web-e2e-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    # MySQL service (dùng khi KHÔNG đặt secrets DB)
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: appdb
          MYSQL_USER: appuser
          MYSQL_PASSWORD: apppass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -uroot -proot --silent"
          --health-interval=5s
          --health-timeout=2s
          --health-retries=10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Playwright browsers (Python)
        run: python -m playwright install --with-deps chromium

      - name: Prepare artifact folders
        run: |
          mkdir -p allure-results
          mkdir -p test-results screenshots videos

      - name: Install MySQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-client

      # Ưu tiên dùng GitHub Secrets; nếu chưa khai, fallback về service MySQL ở trên
      - name: Export DB env (prefer GitHub Secrets)
        run: |
          echo "MYSQL_HOST=${{ secrets.MYSQL_HOST || '127.0.0.1' }}" >> $GITHUB_ENV
          echo "MYSQL_PORT=${{ secrets.MYSQL_PORT || '3306' }}" >> $GITHUB_ENV
          echo "MYSQL_USER=${{ secrets.MYSQL_USER || 'appuser' }}" >> $GITHUB_ENV
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD || 'apppass' }}" >> $GITHUB_ENV
          echo "MYSQL_DB=${{ secrets.MYSQL_DB || 'appdb' }}" >> $GITHUB_ENV

      - name: Wait for MySQL
        run: |
          for i in {1..60}; do
            mysqladmin ping \
              -h "$MYSQL_HOST" -P "$MYSQL_PORT" \
              -u "$MYSQL_USER" -p"$MYSQL_PASSWORD" --silent && break
            echo "Waiting for MySQL ($i/60)..."
            sleep 2
          done

      # (Tuỳ chọn) Init schema nếu có db/schema.sql trong repo
      - name: Init DB schema (optional)
        run: |
          if [ -f db/schema.sql ]; then
            echo "Found db/schema.sql -> initializing..."
            mysql -h "$MYSQL_HOST" -P "$MYSQL_PORT" \
              -u "$MYSQL_USER" -p"$MYSQL_PASSWORD" "$MYSQL_DB" < db/schema.sql
          else
            echo "No db/schema.sql, skip init."
          fi

      - name: Run tests (pytest + Allure results)
        env:
          # App/Playwright env — có default ở Settings nhưng set rõ để CI ổn định
          BASE_URL: ${{ secrets.BASE_URL }}
          USER_EMAIL: ${{ secrets.USER_EMAIL }}
          USER_PASSWORD: ${{ secrets.USER_PASSWORD }}
          PW_HEADLESS: 'true'
          PW_BROWSER: 'chromium'
          PW_TIMEOUT: '10000'
          RECORD_VIDEO: 'false'
          # DB env: đã có trong $GITHUB_ENV từ bước Export DB env
        run: |
          pytest -m smoke --alluredir=allure-results --tb=short -v

      - name: Upload failure artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-failure-artifacts
          path: |
            test-results/
            screenshots/
            videos/
          if-no-files-found: ignore
          retention-days: 14

      - name: Upload Allure results (raw)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: allure-results
          if-no-files-found: warn
          retention-days: 30

  report:
    needs: test
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download allure-results
        uses: actions/download-artifact@v4
        with:
          name: allure-results
          path: allure-results

      - name: Setup Java (for Allure CLI)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install Allure CLI
        run: npm i -g allure-commandline@2.24.1

      - name: Generate Allure HTML report
        run: |
          ls -l allure-results || true
          allure generate allure-results -o allure-report --clean
          echo "# Test Report" > allure-report/README.md
          echo "Generated: $(date -u)" >> allure-report/README.md
          echo "Workflow: ${{ github.workflow }}" >> allure-report/README.md
          echo "Run ID: ${{ github.run_id }}" >> allure-report/README.md

      - name: Upload Allure HTML (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-html
          path: allure-report
          if-no-files-found: error
          retention-days: 30

  notify:
    needs: [test, report]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: Summary (tests failed)
        if: needs.test.result == 'failure'
        run: |
          echo "::error title=E2E Tests Failed::Tests failed on main. Download 'allure-report-html' artifact in this run to view the report."
      - name: Summary (tests passed)
        if: needs.test.result == 'success'
        run: |
          echo "::notice title=E2E Tests Passed::All tests passed. Download 'allure-report-html' artifact in this run to view the report."
