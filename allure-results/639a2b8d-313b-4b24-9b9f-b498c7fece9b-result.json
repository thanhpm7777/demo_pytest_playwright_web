{"name": "test_register_valid", "status": "broken", "statusDetails": {"message": "sqlalchemy.exc.ProgrammingError: (pymysql.err.ProgrammingError) (1146, \"Table 'students.users' doesn't exist\")\n[SQL: SELECT username, email FROM users WHERE email = %(email)s]\n[parameters: {'email': 'newuser@example.com'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "trace": "self = <sqlalchemy.engine.base.Connection object at 0x0000019E97CB6F30>, dialect = <sqlalchemy.dialects.mysql.pymysql.MySQLDialect_pymysql object at 0x0000019E9694C4A0>\ncontext = <sqlalchemy.dialects.mysql.mysqldb.MySQLExecutionContext_mysqldb object at 0x0000019E97DE16A0>, statement = <sqlalchemy.dialects.mysql.mysqldb.MySQLCompiler_mysqldb object at 0x0000019E969EF8F0>\nparameters = [{'email': 'newuser@example.com'}]\n\n    def _exec_single_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n        statement: Union[str, Compiled],\n        parameters: Optional[_AnyMultiExecuteParams],\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for a single DBAPI\n        cursor.execute() or cursor.executemany() call.\n    \n        \"\"\"\n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n    \n            if generic_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor, generic_setinputsizes, context\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e, str(statement), parameters, None, context\n                    )\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters: Optional[_AnyExecuteParams]\n    \n        if not context.executemany:\n            effective_parameters = parameters[0]\n        else:\n            effective_parameters = parameters\n    \n        if self._has_events or self.engine._has_events:\n            for fn in self.dispatch.before_cursor_execute:\n                str_statement, effective_parameters = fn(\n                    self,\n                    cursor,\n                    str_statement,\n                    effective_parameters,\n                    context,\n                    context.executemany,\n                )\n    \n        if self._echo:\n            self._log_info(str_statement)\n    \n            stats = context._get_cache_stats()\n    \n            if not self.engine.hide_parameters:\n                self._log_info(\n                    \"[%s] %r\",\n                    stats,\n                    sql_util._repr_params(\n                        effective_parameters,\n                        batches=10,\n                        ismulti=context.executemany,\n                    ),\n                )\n            else:\n                self._log_info(\n                    \"[%s] [SQL parameters hidden due to hide_parameters=True]\",\n                    stats,\n                )\n    \n        evt_handled: bool = False\n        try:\n            if context.execute_style is ExecuteStyle.EXECUTEMANY:\n                effective_parameters = cast(\n                    \"_CoreMultiExecuteParams\", effective_parameters\n                )\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_executemany:\n                        if fn(\n                            cursor,\n                            str_statement,\n                            effective_parameters,\n                            context,\n                        ):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n                    self.dialect.do_executemany(\n                        cursor,\n                        str_statement,\n                        effective_parameters,\n                        context,\n                    )\n            elif not effective_parameters and context.no_parameters:\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_execute_no_params:\n                        if fn(cursor, str_statement, context):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n                    self.dialect.do_execute_no_params(\n                        cursor, str_statement, context\n                    )\n            else:\n                effective_parameters = cast(\n                    \"_CoreSingleExecuteParams\", effective_parameters\n                )\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_execute:\n                        if fn(\n                            cursor,\n                            str_statement,\n                            effective_parameters,\n                            context,\n                        ):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n>                   self.dialect.do_execute(\n                        cursor, str_statement, effective_parameters, context\n                    )\n\n.venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1967: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:951: in do_execute\n    cursor.execute(statement, parameters)\n.venv\\Lib\\site-packages\\pymysql\\cursors.py:153: in execute\n    result = self._query(query)\n.venv\\Lib\\site-packages\\pymysql\\cursors.py:322: in _query\n    conn.query(q)\n.venv\\Lib\\site-packages\\pymysql\\connections.py:575: in query\n    self._affected_rows = self._read_query_result(unbuffered=unbuffered)\n.venv\\Lib\\site-packages\\pymysql\\connections.py:826: in _read_query_result\n    result.read()\n.venv\\Lib\\site-packages\\pymysql\\connections.py:1203: in read\n    first_packet = self.connection._read_packet()\n.venv\\Lib\\site-packages\\pymysql\\connections.py:782: in _read_packet\n    packet.raise_for_error()\n.venv\\Lib\\site-packages\\pymysql\\protocol.py:219: in raise_for_error\n    err.raise_mysql_exception(self._data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata = b\"\\xffz\\x04#42S02Table 'students.users' doesn't exist\"\n\n    def raise_mysql_exception(data):\n        errno = struct.unpack(\"<h\", data[1:3])[0]\n        # https://dev.mysql.com/doc/dev/mysql-server/latest/page_protocol_basic_err_packet.html\n        # Error packet has optional sqlstate that is 5 bytes and starts with '#'.\n        if data[3] == 0x23:  # '#'\n            # sqlstate = data[4:9].decode()\n            # TODO: Append (sqlstate) in the error message. This will be come in next minor release.\n            errval = data[9:].decode(\"utf-8\", \"replace\")\n        else:\n            errval = data[3:].decode(\"utf-8\", \"replace\")\n        errorclass = error_map.get(errno)\n        if errorclass is None:\n            errorclass = InternalError if errno < 1000 else OperationalError\n>       raise errorclass(errno, errval)\nE       pymysql.err.ProgrammingError: (1146, \"Table 'students.users' doesn't exist\")\n\n.venv\\Lib\\site-packages\\pymysql\\err.py:150: ProgrammingError\n\nThe above exception was the direct cause of the following exception:\n\npage = <Page url='https://hocvancokimngan.com/login/'>\n\n    @pytest.mark.ui\n    @pytest.mark.auth\n    @pytest.mark.regression\n    @allure.feature(\"Auth\")\n    @allure.story(\"Register\")\n    def test_register_valid(page):\n        auth = AuthPage(page).goto_register()\n        username =\"ThanhQA\"\n        email = \"newuser@example.com\"\n        auth.register(username=\"ThanhQA\", email=email, password=\"123456\", confirm_pass=\"123456\")\n        with allure.step(\"Verify user vừa đăng ký đã tồn tại trong MySQL\"):\n>           rows = run_query(\n                \"SELECT username, email FROM users WHERE email = :email\",\n                {\"email\": email})\n\ntests\\auth\\test_register.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nconfigs\\db.py:23: in run_query\n    res = conn.execute(text(query), params or {})\n.venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1419: in execute\n    return meth(\n.venv\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:526: in _execute_on_connection\n    return connection._execute_clauseelement(\n.venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1641: in _execute_clauseelement\n    ret = self._execute_context(\n.venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1846: in _execute_context\n    return self._exec_single_context(\n.venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1986: in _exec_single_context\n    self._handle_dbapi_exception(\n.venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2355: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n.venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1967: in _exec_single_context\n    self.dialect.do_execute(\n.venv\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:951: in do_execute\n    cursor.execute(statement, parameters)\n.venv\\Lib\\site-packages\\pymysql\\cursors.py:153: in execute\n    result = self._query(query)\n.venv\\Lib\\site-packages\\pymysql\\cursors.py:322: in _query\n    conn.query(q)\n.venv\\Lib\\site-packages\\pymysql\\connections.py:575: in query\n    self._affected_rows = self._read_query_result(unbuffered=unbuffered)\n.venv\\Lib\\site-packages\\pymysql\\connections.py:826: in _read_query_result\n    result.read()\n.venv\\Lib\\site-packages\\pymysql\\connections.py:1203: in read\n    first_packet = self.connection._read_packet()\n.venv\\Lib\\site-packages\\pymysql\\connections.py:782: in _read_packet\n    packet.raise_for_error()\n.venv\\Lib\\site-packages\\pymysql\\protocol.py:219: in raise_for_error\n    err.raise_mysql_exception(self._data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata = b\"\\xffz\\x04#42S02Table 'students.users' doesn't exist\"\n\n    def raise_mysql_exception(data):\n        errno = struct.unpack(\"<h\", data[1:3])[0]\n        # https://dev.mysql.com/doc/dev/mysql-server/latest/page_protocol_basic_err_packet.html\n        # Error packet has optional sqlstate that is 5 bytes and starts with '#'.\n        if data[3] == 0x23:  # '#'\n            # sqlstate = data[4:9].decode()\n            # TODO: Append (sqlstate) in the error message. This will be come in next minor release.\n            errval = data[9:].decode(\"utf-8\", \"replace\")\n        else:\n            errval = data[3:].decode(\"utf-8\", \"replace\")\n        errorclass = error_map.get(errno)\n        if errorclass is None:\n            errorclass = InternalError if errno < 1000 else OperationalError\n>       raise errorclass(errno, errval)\nE       sqlalchemy.exc.ProgrammingError: (pymysql.err.ProgrammingError) (1146, \"Table 'students.users' doesn't exist\")\nE       [SQL: SELECT username, email FROM users WHERE email = %(email)s]\nE       [parameters: {'email': 'newuser@example.com'}]\nE       (Background on this error at: https://sqlalche.me/e/20/f405)\n\n.venv\\Lib\\site-packages\\pymysql\\err.py:150: ProgrammingError"}, "steps": [{"name": "Goto Register", "status": "passed", "start": 1756178917256, "stop": 1756178918612}, {"name": "Register user", "status": "passed", "parameters": [{"name": "username", "value": "'ThanhQA'"}, {"name": "email", "value": "'newuser@example.com'"}, {"name": "password", "value": "'123456'"}, {"name": "confirm_pass", "value": "'123456'"}], "start": 1756178918612, "stop": 1756178919587}, {"name": "Verify user vừa đăng ký đã tồn tại trong MySQL", "status": "broken", "statusDetails": {"message": "sqlalchemy.exc.ProgrammingError: (pymysql.err.ProgrammingError) (1146, \"Table 'students.users' doesn't exist\")\n[SQL: SELECT username, email FROM users WHERE email = %(email)s]\n[parameters: {'email': 'newuser@example.com'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)\n", "trace": "  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\tests\\auth\\test_register.py\", line 18, in test_register_valid\n    rows = run_query(\n           ^^^^^^^^^^\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\configs\\db.py\", line 23, in run_query\n    res = conn.execute(text(query), params or {})\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1419, in execute\n    return meth(\n           ^^^^^\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 526, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1641, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1846, in _execute_context\n    return self._exec_single_context(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1986, in _exec_single_context\n    self._handle_dbapi_exception(\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 2355, in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1967, in _exec_single_context\n    self.dialect.do_execute(\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 951, in do_execute\n    cursor.execute(statement, parameters)\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\pymysql\\cursors.py\", line 153, in execute\n    result = self._query(query)\n             ^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\pymysql\\cursors.py\", line 322, in _query\n    conn.query(q)\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\pymysql\\connections.py\", line 575, in query\n    self._affected_rows = self._read_query_result(unbuffered=unbuffered)\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\pymysql\\connections.py\", line 826, in _read_query_result\n    result.read()\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\pymysql\\connections.py\", line 1203, in read\n    first_packet = self.connection._read_packet()\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\pymysql\\connections.py\", line 782, in _read_packet\n    packet.raise_for_error()\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\pymysql\\protocol.py\", line 219, in raise_for_error\n    err.raise_mysql_exception(self._data)\n  File \"C:\\Users\\thanh\\PycharmProjects\\demo_pytest_playwright_web\\.venv\\Lib\\site-packages\\pymysql\\err.py\", line 150, in raise_mysql_exception\n    raise errorclass(errno, errval)\n"}, "start": 1756178919587, "stop": 1756178919738}], "start": 1756178917256, "stop": 1756178919738, "uuid": "780b1413-35e8-4eb0-84f5-1075ee6698a8", "historyId": "6f55718ea0bec09ba40ede5f445c18f1", "testCaseId": "6f55718ea0bec09ba40ede5f445c18f1", "fullName": "tests.auth.test_register#test_register_valid", "labels": [{"name": "story", "value": "Register"}, {"name": "feature", "value": "Auth"}, {"name": "tag", "value": "regression"}, {"name": "tag", "value": "auth"}, {"name": "tag", "value": "ui"}, {"name": "parentSuite", "value": "tests.auth"}, {"name": "suite", "value": "test_register"}, {"name": "host", "value": "Thanh-PC"}, {"name": "thread", "value": "28520-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.auth.test_register"}]}